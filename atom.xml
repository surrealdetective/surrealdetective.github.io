<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Surreal Detective]]></title>
  <link href="http://surrealdetective.github.io/atom.xml" rel="self"/>
  <link href="http://surrealdetective.github.io/"/>
  <updated>2013-08-04T23:23:39-04:00</updated>
  <id>http://surrealdetective.github.io/</id>
  <author>
    <name><![CDATA[Alex Au]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Simplify a Complex User Interface With 3 Design Principles]]></title>
    <link href="http://surrealdetective.github.io/blog/2013/08/04/simplify-a-complex-user-interface-with-3-design-principles/"/>
    <updated>2013-08-04T22:32:00-04:00</updated>
    <id>http://surrealdetective.github.io/blog/2013/08/04/simplify-a-complex-user-interface-with-3-design-principles</id>
    <content type="html"><![CDATA[<h2>This picture changed the way I saw the world for a day.</h2>

<p><img src="http://surrealdetective.github.io/images/visual-design-img-of-book.jpg" /></p>

<p>After programming for 9 weeks at Flatiron School, I picked up a book on visual design. It explains design concepts like professors who, at first glance, delve into gratuitous detail&hellip; until you realize how that info germinates your understanding. Better yet, the book offers useful steps for UI beginners to improve their designs intuitively. (And the book comes in green)</p>

<p><img src="http://surrealdetective.github.io/images/visual-design-book.jpg" /></p>

<p>Here are 3 tips I used from the book to&hellip;</p>

<h2>improve my UI design.</h2>

<h4>1. Reduce</h4>

<p>  Identify the functionality of a given thing, then eliminate unessential clutter. The books says wisely,</p>

<blockquote><p>&ldquo;Whereas art strives to <em>express</em> fundamental ideas and perspectives on the human condition, design is concerned with finding the <em>representation</em> best suited to the communication of some specific information&rdquo; (Mullet 9).</p></blockquote>

<p>  In other words, design serves a purpose, so the fundamental principle of good design is to know its own purpose. Just as how a ruby method shouldn&rsquo;t do too many things, the same applies to design &ndash; too many features will limit its usefulness.</p>

<h4>2. Balance by Rank</h4>

<p>  Chunk and label the elements of your design into named groups, then destablish a clear visual hierachy. This means ranking your named groups in order of importance from 1-7. In your design, the one or two most important elements must stand out, with others reduced to supporting roles. The process of ranking your design elements will give your creation process a purpose, as it will clarify what your design should achieve.</p>

<p>  Adjust the size and value of elements to make them stand out. In general, maximize perception difference between groups, but minimize them within like-objects.</p>

<h4>3. Regularize</h4>

<p>  Use a meaningful pattern to achieve a design&rsquo;s purpose by repeating similar elements. As a design beginner, my approach towards finding a meaningful pattern is to solve easier problems first. Then, if I can use those simple problem-solving patterns to also solve more complex ones, then that constitutes a meaningful pattern.</p>

<p>  Another approach is to look for repeated functionality within your app, find its simplest use case, then re-purpose it to more complex use cases.</p>

<h2>Case Study to Re-design UI</h2>

<p>For my team project at the Flatiron School, we&rsquo;re creating a website that helps Flatiron School process applicants to its classes. One of the views in the website lets the administrator search for applicants. Before, we had 5 columns and as many as 5 lines within a cell. The view bewildered users.</p>

<p>To improve the design, I first focused on what the page hoped to achieve &ndash; find applicants. More specifically, the administrator searches for applicants to then take a look at their entire application. Everything else should be eliminated or de-emphasized. Ultimately, this is what was left:</p>

<p><img src="http://surrealdetective.github.io/images/appapp-search-view.jpg" /></p>

<p>I then re-used this basic design for another view where the administrator is skimming through initial applications before reading the entire thing.</p>

<p>By using a familiar pattern, the app can utilize space more effectively. In this case, it can fit many actions into a relatively small space because the user has become accustomed to part of the view.</p>

<p><img src="http://surrealdetective.github.io/images/appapp-thinner-view.jpg" /></p>

<h2>Designing UI Takeaway</h2>

<p>By identifying the purpose of a design and communicating that purpose in a simple and elegant way, you can greatly improve your UI.</p>

<h5>Addendum</h5>

<p>After seeing the picture of traditional book layouts, I saw the manmade world around me as exactly that &ndash; manmade! I saw the intentional simplicity of all the designs around me, and it was amazing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tracking the Results of a Rails-Powered Survey]]></title>
    <link href="http://surrealdetective.github.io/blog/2013/07/18/tracking-the-results-of-a-rails-powered-survey/"/>
    <updated>2013-07-18T08:45:00-04:00</updated>
    <id>http://surrealdetective.github.io/blog/2013/07/18/tracking-the-results-of-a-rails-powered-survey</id>
    <content type="html"><![CDATA[<h2>Setup of my Rails Survey App</h2>

<p>After officially entering the world of rails a couple weeks ago at the Flatiron School, I decided to start a personal rails project to solidify my skills. I chose to put the survey porition of my undergrad these online. The survey asks respondents questions about their perception of a learning experience. The data is ideally displayed in a series of radar graphs and bar graphs. This blog post focuses on how I collect survey responses in the correct format.</p>

<p>Luckily for me, the Flatiron Dean made a Quiz App a public repo during class. I forked this repo, which already had 5 models: Quiz, Question, Choice, Answer, and User. My task now was to calculate the results.</p>

<h2>Collect the Rails App Survey Results</h2>

<p>For the purpose of this post, the survey has 48 questions, which is broken down into 6 sets of 8 questions. The method I made to solve this problem was three-tiered:</p>

<ol>
<li>Collect survey answers in sets of 8</li>
<li>Correctly compare a user&rsquo;s answer with all possible choices</li>
<li>Based on the user&rsquo;s answer, assign that person a score</li>
</ol>


<p>See the code below:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Quiz</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:questions</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:results</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">results_as_set_of_8</span><span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="n">range</span><span class="p">)</span>
</span><span class='line'>    <span class="n">score</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>     <span class="nb">self</span><span class="o">.</span><span class="n">questions</span><span class="o">[</span><span class="n">range</span><span class="o">].</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">q</span><span class="p">,</span> <span class="n">qi</span><span class="o">|</span>
</span><span class='line'>       <span class="n">q</span><span class="o">.</span><span class="n">choices</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">c</span><span class="p">,</span> <span class="n">ci</span><span class="o">|</span>
</span><span class='line'>         <span class="k">if</span> <span class="n">c</span><span class="o">.</span><span class="n">id</span> <span class="o">==</span> <span class="n">user</span><span class="o">.</span><span class="n">answers</span><span class="o">[</span><span class="n">range</span><span class="o">.</span><span class="n">first</span> <span class="o">+</span> <span class="n">qi</span><span class="o">].</span><span class="n">choice_id</span>
</span><span class='line'>           <span class="n">score</span> <span class="o">+=</span> <span class="n">ci</span> <span class="o">+</span><span class="mi">5</span> <span class="o">-</span> <span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="n">ci</span><span class="p">)</span>
</span><span class='line'>         <span class="k">end</span>
</span><span class='line'>       <span class="k">end</span>
</span><span class='line'>     <span class="k">end</span>
</span><span class='line'>     <span class="k">return</span> <span class="n">score</span><span class="o">/</span><span class="mi">8</span><span class="o">.</span><span class="mi">0</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li><h3>Sets of 8 uses <code>range</code></h3>

<p> This method takes <code>range</code> as a parameter, so that I can specify which set of 8 questions. The range also gets used to compare the question with its corresponding answer.</p></li>
<li><h3>Correctly compare a user&rsquo;s answers with all possible choices</h3>

<p> I used the <code>each_with_index</code> method on the <code>range</code> of questions to find two pieces of information:</p>

<p> <em>which question id corresponds with the first answer id (start at range.first)
 </em>as the <code>.each</code> enumerable changes which question is being handled, correspond that change with the appropriate answer id (by proceeding upwards with qi)</p>

<p> To do this, I specified which answer with:</p>

<p> <code>ruby
 user.answers[range.first + qi]
</code></p>

<p> Once this synchronization between question and a user&rsquo;s answer is made, I checked all of a question&rsquo;s choices to see if their id matches the answer&rsquo;s choice id, of which it has only one.</p></li>
<li><h3>Based on the user&rsquo;s answer, assign that person a score</h3>

<p> Another challenge was associating number values with the choice object, which has the single String attribute of :content. Becuase the survey arranges <code>choice.content</code> from values of 5 to 1, such as, &ldquo;Strongly Agree, Agree, Neither Agree nor Disagree, Disagree, Strongly Disagree,&rdquo; I ended up making a simple formula to assign the right score:</p>

<p> <code>ruby
 score += ci +5 - (2*ci)
</code></p>

<p> Everytime the user&rsquo;s answer&rsquo;s choice id matches a quesiton&rsquo;s choice id, then based on its position in <code>a.choices</code>, the above algebraic expression calculates the right score. Furthermore, this method finds the score sum because at the end, it finds the average score with <code>score/8.0</code>.</p></li>
</ol>


<h2>Coding Takeaways</h2>

<ol>
<li><p>Make it work</p>

<p> Things might have been easier for me if I gave choices a value attribute. Tracking the value of a choice would make they survey app more flexible, such as if i wanted to randomize the order in which choices appear.</p>

<p> But rather than going backwards over my code, I moved forward first, trusting my ability to refactor in the future.</p></li>
<li><p>Use debugger</p>

<p> Initially, I missed how to correctly associate <code>user.answers</code> with <code>quiz.quesitons</code>. My method worked for the first set of 8 questions, but not for sets after that. By looking at the progression of the code through debugger, I visibly saw where my method failed becuase the <code>if c.id</code> statement was never triggered.</p></li>
</ol>


<p>By focusing on making it work, and looking at the code with detail and granularity, I quickly made my app functional. Though next time, I&rsquo;ll add a value attribute to the choice model and make my life easier.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Nested Ruby Params Hash for Complex HTML Forms and Sinatra]]></title>
    <link href="http://surrealdetective.github.io/blog/2013/07/01/the-nested-ruby-params-hash-for-complex-html-forms-and-sinatra/"/>
    <updated>2013-07-01T23:02:00-04:00</updated>
    <id>http://surrealdetective.github.io/blog/2013/07/01/the-nested-ruby-params-hash-for-complex-html-forms-and-sinatra</id>
    <content type="html"><![CDATA[<h2>Showcasing the Normal, Unaltered Use of the Params Hash</h2>

<p>The params hash is a <a href="http://en.wikipedia.org/wiki/Rack">&ldquo;rack&rdquo;</a>  object that is accessible through Sinatra&rsquo;s request object. This params hash stores information posted by html forms in the form of -you guessed it &ndash; a hash, which contains a key-value pair. The key of this pair defaults to the value of the <code>&lt;input&gt;</code>&rsquo;s name=&ldquo;attribute&rdquo;. Meanwhile, the info that the user submits is the value of that key-value pair.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">&#39;/&#39;</span> <span class="na">method=</span><span class="s">&quot;POST&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>     <span class="nt">&lt;label&gt;</span>Location<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>          <span class="nt">&lt;input</span> <span class="na">name=</span><span class="s">&quot;location&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>     <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span><span class="nt">&gt;</span>Submit<span class="nt">&lt;/input&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>For the above html, you can access the user&rsquo;s entry in app.rb within the <code>post '/' do</code> route:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">post</span> <span class="s1">&#39;/&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="vi">@location</span> <span class="o">=</span> <span class="n">params</span><span class="o">[</span><span class="ss">:location</span><span class="o">]</span>
</span><span class='line'>  <span class="s2">&quot;Ain&#39;t </span><span class="si">#{</span><span class="vi">@location</span><span class="si">}</span><span class="s2"> grand?&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>If I entered &ldquo;New York City&rdquo; into the <code>&lt;input name="location"/&gt;</code>, then <code>@location = "New York City"</code>.
Similarly, if there was another input, <code>&lt;input name="arrival_date"&gt;</code>, where I entered &ldquo;June,&rdquo; then the params hash would have two key-value pairs.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">params</span> <span class="o">==</span> <span class="p">{</span><span class="ss">:location</span> <span class="o">=&gt;</span> <span class="s2">&quot;New York City&quot;</span><span class="p">,</span> <span class="ss">:arrival_date</span> <span class="o">=&gt;</span> <span class="s2">&quot;June&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Kick it up a Notch with a Nested Params Hash</h2>

<p>Amazingly, you can modfiy the data structure of the params hash by carefully altering the name attribute of <code>&lt;input&gt;</code>. For example, you can make the params hash contain an array of hashes. Because this process is slightly complex, I will first show off what&rsquo;s possible with an example, then list further below the key points for understanding how to do it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;h1&gt;</span>List of Games with Name, Difficulty, and Number of Players<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'><span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">&#39;/games&#39;</span> <span class="na">method=</span><span class="s">&quot;POST&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="err">&lt;</span>% 5.times do %&gt;
</span><span class='line'>    <span class="nt">&lt;fieldset&gt;</span>
</span><span class='line'>      <span class="nt">&lt;li&gt;</span>
</span><span class='line'>        <span class="nt">&lt;label&gt;</span>Name<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>        <span class="nt">&lt;input</span> <span class="err">...</span> <span class="na">name=</span><span class="s">&quot;game[][name]&quot;</span><span class="nt">/&gt;&lt;/li&gt;</span>
</span><span class='line'>      <span class="nt">&lt;li&gt;</span>
</span><span class='line'>        <span class="nt">&lt;label&gt;</span>Difficulty<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>        <span class="nt">&lt;input</span> <span class="err">...</span> <span class="na">name=</span><span class="s">&quot;game[][difficulty]&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>      <span class="nt">&lt;li&gt;</span>
</span><span class='line'>        <span class="nt">&lt;label&gt;</span>Players<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>        <span class="nt">&lt;input</span> <span class="err">...</span> <span class="na">name=</span><span class="s">&quot;game[][players]&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/fieldset&gt;</span>
</span><span class='line'>  <span class="err">&lt;</span>% end %&gt;
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/form&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above form outputs the following params hash:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">params</span> <span class="o">==</span> <span class="p">{</span><span class="s2">&quot;game&quot;</span><span class="o">=&gt;[</span><span class="p">{</span><span class="s2">&quot;name&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;Connect 4&quot;</span><span class="p">,</span> <span class="s2">&quot;difficulty&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;Easy&quot;</span><span class="p">,</span> <span class="s2">&quot;players&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;2&quot;</span><span class="p">},</span> <span class="p">{</span><span class="s2">&quot;name&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;Go Fish&quot;</span><span class="p">,</span> <span class="s2">&quot;difficulty&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;Easy&quot;</span><span class="p">,</span> <span class="s2">&quot;players&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;4&quot;</span><span class="p">},</span> <span class="p">{</span><span class="s2">&quot;name&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;Monopoly&quot;</span><span class="p">,</span> <span class="s2">&quot;difficulty&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;Easy&quot;</span><span class="p">,</span> <span class="s2">&quot;players&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;4&quot;</span><span class="p">},</span> <span class="p">{</span><span class="s2">&quot;name&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;Chess&quot;</span><span class="p">,</span> <span class="s2">&quot;difficulty&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;Hard&quot;</span><span class="p">,</span> <span class="s2">&quot;players&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;2&quot;</span><span class="p">},</span> <span class="p">{</span><span class="s2">&quot;name&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;Settlers of Catan&quot;</span><span class="p">,</span> <span class="s2">&quot;difficulty&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;Medium&quot;</span><span class="p">,</span> <span class="s2">&quot;players&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;4&quot;</span><span class="p">}</span><span class="o">]</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, the params hash&rsquo;s top-layer has only one key-value pair, with &ldquo;game&rdquo; as its key. If you look at the html form, this initially makes sense because game is repeated as the top-layer for all three inputs.</p>

<p>As programmers, we then have a choice of modifying the value of this pair from a string into something else. If we want to turn the pair&rsquo;s value into an array, then we write an empty array as above. If we want to make the value a hash, then we surround the attribute in square brackets.</p>

<p>Notice that each hash in the array contains 3 key-value pairs. Just like the first example with &ldquo;arrival_date&rdquo; and &ldquo;location,&rdquo; adding a key-value pair on the same layer will add a key-value pair to that same hash &ndash; not create another hash inside a hash.</p>

<p>At this point, your brain might be wheeling a bit. Hopefully these rules below will help you clarify how to alter the params hash through html forms.</p>

<h2>Primer for Understanding Params</h2>

<ol>
<li><p>Realize that because the params hash stores form data, the user&rsquo;s entry <strong>should</strong> always be the value of a key-value pair.</p></li>
<li><p>If you think of params hash as having a pointer to what will be returned, then everytime you add an extra layer, the data type of the extra layer &ndash; be it array or hash, will be the return of the formerly-lowest layer.</p>

<ul>
<li><p>In other words, <code>&lt;input name="game[][name][]" /&gt;</code> sets the value of the <code>:name=&gt;value</code> pair to an array, and although this wouldn&rsquo;t break your app, it doesn&rsquo;t make that much sense because there would be no way to track the attributes of a particular object. Every entry would be added to the array, rather than the array containing hash elements.</p></li>
<li><p>Therefore you must end it with a key-value pair like <code>&lt;input name="game[][name][][syllables]" /&gt;</code>. Apologies for the quirky example, but here the user would input the number of syllables in the game&rsquo;s name, of which there are many: such as &ldquo;ping pong,&rdquo; &ldquo;table tennis,&rdquo; and &ldquo;pong.&rdquo;</p></li>
</ul>
</li>
<li><p>By convention, you leave the top-layer of the params hash as being without square brackets, despite the fact that it is a key-value pair inside the params hash.</p></li>
<li><p>When in doubt, practice using the following method in irb:</p></li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rack&#39;</span>
</span><span class='line'><span class="k">def</span> <span class="nf">p</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'> <span class="ss">Rack</span><span class="p">:</span><span class="ss">:Utils</span><span class="o">.</span><span class="n">parse_nested_query</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>and use the following syntax: <code>p("game[][name][][syllables]" )</code></p>

<p>Now as a challenge, can you decipher what the above params hash looks like?</p>

<p>Answer:
<code>params == {:game =&gt; [{:name=&gt; [ {:syllables=&gt; value} ] }] }</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seth Godin's Approach to Speaking with the Flatiron School]]></title>
    <link href="http://surrealdetective.github.io/blog/2013/07/01/seth-godins-approach-to-speaking-with-the-flatiron-school/"/>
    <updated>2013-07-01T13:26:00-04:00</updated>
    <id>http://surrealdetective.github.io/blog/2013/07/01/seth-godins-approach-to-speaking-with-the-flatiron-school</id>
    <content type="html"><![CDATA[<p>Seth Godin came and talked to the Flatiron School today. This is what I observed:</p>

<h2>1. Seth&rsquo;s Remarks were Catered to the Flatiron School</h2>

<p>His opening remarks declared every Flatiron student as being at the right place at the right time. Just like his dad who earned a degree in Mechanical Engineering in 1957, corporations are picking us straight off from campus. The question Seth posed is not whether we will be successful, but whether we will matter.</p>

<h2>2. Seth Answered Questions in One of Two Manners</h2>

<h4>a. He unpacked meandering concerns</h4>

<p>When a teaching assistant asked how to know how to apply themselves (i.e. what does it mean to &ldquo;matter&rdquo;) while they&rsquo;re waiting for the next big idea, Seth Godin broke down the concern into several parts. First, he asserted the context in which the concern takes place: anyone can start an online business in 15 minutes, but that&rsquo;s not what it means to matter. Most technical ideas are not anything that Flatiron students couldn&rsquo;t figure out. For instance, once Twitter became big, dozens of Twitter clones came out because the technical part of making it was easy. To matter means breaking from convention, experiencing fear, and taking the critques of naysayers &ndash; who arrive at the pre-party of any &ldquo;next big thing.&rdquo;</p>

<p>Then, he addressed the lingering concern of waiting for the next big idea: it&rsquo;s bullshit. If you are waiting, then you are hiding. What really matters isn&rsquo;t the idea itself &ndash; Altavista existed years before Google did as a search engine. Google was not the first company to place text ads next to searches. What made Google unique was their perspective, philosophy, and energy. That&rsquo;s what people bought into, and that&rsquo;s the platform through which Google changed its users.</p>

<h4>b. He pivoted the question&rsquo;s intent to deliver his value to his audience</h4>

<p>A Flatiron student asked how, given Seth&rsquo;s advice that we should use fear as an indicator that we should keep pushing, if there were strategies for changing people who lacked confidence in themselves as opposed to people who&rsquo;ve had some experience of success and therefore have the foundation for overcoming their fears. Seth related a story about his mentor Zig Zigar who corrected Seth on his public-speaking habit of launching his full energy at re-engaging a sleeping audience member. Zig said that he focused on the two hundred other audience members who came to the event for the right reason and who would benefit from his talk.</p>

<p>&ldquo;Shun the non-believers,&rdquo; Seth said. A Google spokesperson said more than 8 years ago that one day, everyone would use Google, so the later people found out about it &ndash; the better &ndash; because then the product would be so much better. Rather than focusing on the people who don&rsquo;t want to listen to you, Seth said first convert all the people who are listening, then worry about the others afterwards. Seth managed to avoid answering the question directly &ndash; while legitimately providing his own answer &ndash; that focusing on changing people who won&rsquo;t listen is a terrible use of resources. Rather, sell to people who want to be sold to.</p>

<h2>3. Seth synthesizes his philosophy through every response</h2>

<p>Seth embodies his philosophy in his talks. He draws from common everyday stories, and has an aim for them &ndash; to puncture our illusions about how the world works and the status of our own safety. It is not safe to conform because the conformers will not be picked for once-in-a-lifetime opportunities. Conformers are not &ldquo;best in the world,&rdquo; and they won&rsquo;t &ldquo;matter.&rdquo; To matter, you face fear everyday so that you do not become a success story that does the same thing till old age.</p>

<p>For Seth Godin, this means writing a blog post every morning that may fail, going to an intimate talk with no notes, and taking a hiatus from writing books to building projects &ndash; a task outside his comfort zone. Every piece of advice Seth issues is derived from real-life insight from implementing his own suggestions in frightful situations. Seth matters to others because he takes on the task of facing the resistance, inviting it to tea, and bringing back a nugget of wisdom to guide others who dare to take a trail-blazing path.</p>

<p>Thanks Seth for the great talk. It was relevant and full of empathy.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What should I learn when becoming a web developer?]]></title>
    <link href="http://surrealdetective.github.io/blog/2013/06/16/what-should-i-learn-when-becoming-a-web-developer/"/>
    <updated>2013-06-16T22:49:00-04:00</updated>
    <id>http://surrealdetective.github.io/blog/2013/06/16/what-should-i-learn-when-becoming-a-web-developer</id>
    <content type="html"><![CDATA[<p>How will you learn to program? What you learn first can determine your future as a programmer. As a novice, I can only speak to my experience. Here was my thinking process:</p>

<p>I’d like to build useful and interesting projects as quickly as possible, while also making a living from my ability to program. After learning on my own and making steady but not lightning-fast progress, I looked for an immersive schooling program that would speed up my learning. The school I chose, the Flatiron School, teaches students in 4 months to be capable web programmers. Their curriculum prepares students to be Ruby on Rails web developers, with all students finding employment after graduation. This is exactly what I was looking for &ndash; fast and effective.</p>

<p>So what do you learn in their curriculum?</p>

<ol>
<li><p>Basic Vocabulary &ndash; a web developer works both in visual space and data manipulation. Flatiron School’s pre-work begins with a quick grounding in how websites work and the concepts professionals use to design them.</p></li>
<li><p>HTML &ndash; Just as Twitter uses tags to describe content, “Hypertext Markup Language” is used to describe the content of the Web. For example, a paragraph of text would be surrounded by a paragraph tag, and an image would be surrounded by an image tag. Using HTML makes it easy for search engines to figure out what a website is about, and it also helps web developers adjust the layout of a website.</p></li>
<li><p>CSS &ndash; “Cascading Style Sheets” work with HTML to adjust the visual design of a website. For example, CSS can tell all paragraphs to appear in 14 point Helvetica font and to start as gray, but to fade to black when a user’s mouse hovers over the text. CSS makes it easier to visually design a site because it separates content from style, allowing for web developers to think about these two topics separately. Furthermore,  web developers can overhaul the style of a site very quickly using CSS &ndash; rather than changing the style of every paragraph in a large website containing thousands of articles, a web developer can change just one document that will then apply that style to all paragraphs of every article.</p></li>
<li><p>Javascript &ndash; This is the programming language of the internet. It is used to listen for events and change the display on a website based on those events. Javascript is a programming language because developers can use it to instruct computers to make new methods that do entirely new things. By contrast, HTML and CSS are not programming languages because developers describe content with a set vocabulary, which web browsers read and apply a set of fixed methods to achieve their effects.</p></li>
<li><p>Ruby &ndash; This is the programming language of Ruby on Rails. It is known for being intuitive to write and, when combined with Rails &ndash; to be a fast and effective way to make websites compared with other languages.</p></li>
<li><p>Rails &ndash; This is an open source web application framework and server, which means that it is a standardized way to create a website. A website has a lot of files that interact with each other, and Rails is a popular way of having those files interact. It’s popular because many of the decisions for how website files interact is defaulted according to an easily-deciphered logic, allowing for developers to focus their mental efforts on adding value.</p></li>
<li><p>The Command Line &ndash; computers can receive instructions through “the command line.” This is the standard way for programmers to interact with computers because many commands can only be issued through the command line.</p></li>
<li><p>SQL &ndash; “Structured Query Language” is a popular database language. Databases store data in an easily retrievable format. When a website like Facebook displays the status updates of all your friends, it has to query that data before displaying it. Whereas it would take you or me dozens of hours to find that information in a stack of papers, databases are designed to make that process quick and accurate.</p></li>
<li><p>Testing &ndash; while not technically requiring its own programming language, testing does use a distinct vocabulary and methodology. Because a website has a lot of moving parts, programmers create tests that let them identify which part suddenly breaks down with any change in the code.</p></li>
<li><p>Best Practices &ndash; Just as in any discipline, there are some problems that have been “figured out.” These best practices are important to know because they are the best way to solve frequently occurring problems.</p></li>
</ol>


<p>I dabbled in programming for a year before deciding to become a programmer. The most important insight for me during this time was figuring out when to take programming seriously. If you want to find out if you’re interested, then dabble by all means. However, if you’re aiming to be capable as a programmer, then the sooner you get serious, the better &ndash; you’ve got a lot of work to do.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Primer on Making your own Gem]]></title>
    <link href="http://surrealdetective.github.io/blog/2013/06/16/a-primer-on-making-your-own-gem/"/>
    <updated>2013-06-16T22:19:00-04:00</updated>
    <id>http://surrealdetective.github.io/blog/2013/06/16/a-primer-on-making-your-own-gem</id>
    <content type="html"><![CDATA[<p>After being inspired by <a href="http://flatironschool.com/">Flatiron</a> students who created a <a href="http://shitavisays.tumblr.com/">shitavisays</a> <a href="https://rubygems.org/gems/shit-avi-says">gem</a>, I decided to prepare myself now to make a gem in the future. My first step is reading this <a href="https://speakerdeck.com/qrush/becoming-a-ruby-gemcutter">presentation</a>, which gives a brief overview of the gem-cutting process. See below for my own quick summary.</p>

<h2>Introduction (Slides 1-13)</h2>

<h4>Speaker Nick Quaranto introduces himself and his presentation.</h4>

<h2>Gem* Definition (Slides 14-22)</h2>

<p>Gems are a packed Ruby library or application. RubyGems help you download, install, and manipulate them.</p>

<h2>Gem Content (Slides 23-44)</h2>

<h4>Gems have three things: code, docs, and a gemspec.</h4>

<p>Code are the methods that the gem adds to Ruby. Docs describe the code&rsquo;s functionality or aid the gem without being code. A gemspec specifies the required gems for the code to work.</p>

<p>To access a gem&rsquo;s code in Ruby, use RubyGems to override the Ruby&rsquo;s standard $LOAD_PATH. This means a gem&#8217; code, such as found in a bin/ or lib/ folder of that gem, will be put into the $LOAD_PATH.</p>

<p>There&rsquo;s a difference between .gem an gem files. I&rsquo;m not sure at the moment, but it seems that a gem is a subset of .gem because while a gem is a packed Ruby library, a .gem includes other data or metadata, both of which need to be unzipped from a compressed file format.</p>

<h2>Why Make Gems (Slides 45-53)</h2>

<h4>Reuse your code, practice coding with interesting projects, and help others.</h4>

<h2>How to Make a Gem (Slides 54-72)</h2>

<h4>Locally, you build and install it. Remotely, you push then install.</h4>

<p><img src="http://surrealdetective.github.io/images/gem-cutting-primer.jpg" />
See above for a Gem directory structure, some example code, its Gemspec, and the Gem build command.</p>

<h3>LOCALLY</h3>

<h4>Build</h4>

<p>You need to write a Gemspec with metadata on your gem and code files that contain the methods of your Gem.</p>

<h4>Install</h4>

<p>After you install your gem, you should test it.</p>

<h3>REMOTELY</h3>

<h4>Push and Install</h4>

<p>$gem push gem_name-0.0.0.gem will let you push it to RubyGems.org. Then you can install and run it.</p>

<h2>Command Line and Gems (Slides 74-84)</h2>

<p>Use the bash commands and a little C to modify and improve your Gem! I did not understand exactly how, but here the speaker extends the functionallity of his Gem by letting it take any string as a parameter.</p>

<h2>Testing Resources (Slides 85-95)</h2>

<p>Test because you are releasing your Gem to the public, and you will be scrutinized.</p>

<h2>Documentation (Slides 95-105)</h2>

<p>Go to <a href="http://yarddoc.org">http://yarddoc.org</a> to learn how to document your code. Documentation helps others use your gem. Also, before pushing your gem, strongly consider saying hi to @rubygems on Twitter because webhook allows the rubygems community to scrutinize your gem the moment it&rsquo;s published, so it&rsquo;s a good idea to say hi to your future scrutinizers.</p>

<h2>Classic Pointers for Gem-Cutting (Slides 106-151)</h2>

<h4>What to do over the lifetime of a gem.</h4>

<h5>Make your Gem Accessible</h5>

<p>Write a README, use a license so your code isn&rsquo;t copyrighted, name your gem properly and version it using a major, minor, and patch scheme.</p>

<h5>Make your Gem Work</h5>

<p>Organize your file structure the right way by having only one top-level file. Also, specify your dependecies by being neither too optimistic or exact with the versions that you expect to work. Instead, specify a range, such all minor gem versions &lt; 1.0.0.</p>

<h5>Be Classy</h5>

<p>Cut prereleases of your gem so that people who install it have the expectation that it might still have bugs. Furthermore, use continuous integration to constantly test your code, which you can do for free at <a href="https://travis-ci.org/">https://travis-ci.org/</a>.</p>

<h2>Gem-cutting Takeaways</h2>

<ol>
<li>Making a gem is pretty straightforward and rewarding</li>
<li>To develop confidence, look over the presentation and make the easiest gem</li>
<li>Prepare for feedback to your gem after you push it</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Branch is not an Origin]]></title>
    <link href="http://surrealdetective.github.io/blog/2013/06/05/how-branch-is-not-an-origin/"/>
    <updated>2013-06-05T10:57:00-04:00</updated>
    <id>http://surrealdetective.github.io/blog/2013/06/05/how-branch-is-not-an-origin</id>
    <content type="html"><![CDATA[<h2>What is a branch?</h2>


<p>Your local copy of the repository is the branch. You might often be on your master branch.</p>




<h2>What is an origin?</h2>


<p>By convention, this is the name of your remote repository.</p>




<h2>The difference between Branch and Origin</h2>


<p>Remotes are the entire repository, which includes all branches. Your master branch is more like a unit of work within the entire project that is the remote.</p>

]]></content>
  </entry>
  
</feed>
